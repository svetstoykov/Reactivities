import { observer } from "mobx-react-lite";
import { ChangeEvent, useEffect, useState } from "react";
import { Link, useHistory, useParams } from "react-router-dom";
import { Button, FormField, Label, Segment } from "semantic-ui-react";
import LoadingComponent from "../../../app/layout/LoadingComponent";
import { useStore } from "../../../app/stores/store";
import { ActivityViewModel } from "../../../autogenerated/a-p-i/activities/models/activity-view-model";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

function ActivityForm() {
    const { activityStore } = useStore();
    const history = useHistory();
    const { id } = useParams<{ id: string }>();

    const {
        loadActivity,
        createActivity,
        updateActivity,
        setLoadingInitial,
        loading,
        loadingInitial,
    } = activityStore;

    const initialState: ActivityViewModel = {
        id: undefined,
        title: "",
        date: "",
        description: "",
        category: "",
        city: "",
        venue: "",
    };

    const [activity, setActivity] = useState(initialState);

    const validationSchema = Yup.object({
        title: Yup.string().required("Title is required"),
    });

    useEffect(() => {
        if (id) {
            loadActivity(+id).then((activity) => setActivity(activity!));
            return;
        }
        setLoadingInitial(false);
    }, [id, loadActivity, setLoadingInitial]);

    // function handleSubmit() {
    //     const createUpdateAction = activity.id
    //         ? updateActivity(activity)
    //         : createActivity(activity);

    //     createUpdateAction.then(() =>
    //         history.push(`/activities/${activity.id}`)
    //     );
    // }

    // function handleChange(
    //     event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    // ) {
    //     const { name, value } = event.target;
    //     setActivity({ ...activity, [name]: value });
    // }

    if (loadingInitial)
        return <LoadingComponent content="Loading Activity..." />;

    return (
        <Segment clearing>
            <Formik
                validationSchema={validationSchema}
                enableReinitialize
                initialValues={activity}
                onSubmit={(values) => console.log(values)}>
                {({ handleSubmit }) => (
                    <Form
                        className="ui form"
                        onSubmit={handleSubmit}
                        autoComplete="off">
                        <FormField>
                            <Field placeholder="Title" name="title" />
                            <ErrorMessage
                                name="title"
                                render={(error) => (
                                    <Label
                                        pointing
                                        color="red"
                                        content={error}></Label>
                                )}></ErrorMessage>
                        </FormField>
                        <Field placeholder="Description" name="description" />
                        <Field placeholder="Category" name="category" />
                        <Field type="date" placeholder="Date" name="date" />
                        <Field placeholder="City" name="city" />
                        <Field placeholder="Venue" name="venue" />
                        <Button
                            loading={loading}
                            floated="right"
                            positive
                            type="submit"
                            content="Submit"
                        />
                        <Button
                            as={Link}
                            to="/activities"
                            floated="right"
                            type="submit"
                            color="red"
                            content="Cancel"
                        />
                    </Form>
                )}
            </Formik>
        </Segment>
    );
}

export default observer(ActivityForm);
