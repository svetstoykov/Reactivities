import { Form, Formik } from "formik";
import { Button } from "semantic-ui-react";
import ReactivitiesTextArea from "../../../app/common/form/ReactivitiesTextArea";
import ReactivitiesTextInput from "../../../app/common/form/ReactivitiesTextInput";
import * as Yup from "yup";
import { useStore } from "../../../app/stores/store";
import { ProfileApiModel } from "../../../autogenerated/a-p-i/profiles/profile-api-model";
import { observer } from "mobx-react-lite";

function ProfileDetailsEditForm() {
    const { profileStore } = useStore();

    function handleFormSubmit(profile: ProfileApiModel) {
        profileStore.updateDetails(profile).then(() => profileStore.setEditDetailsMode(false));
    }

    const validationSchema = Yup.object({
        displayName: Yup.string().required("Display Name is required"),
        email: Yup.string().required("Email is required"),
    });

    return (
        <Formik
            enableReinitialize
            validationSchema={validationSchema}
            initialValues={profileStore.currentProfile}
            onSubmit={(values) => handleFormSubmit(values)}>
            {({ handleSubmit, isSubmitting, isValid, dirty }) => (
                <Form className="ui form" onSubmit={handleSubmit} autoComplete="off">
                    <ReactivitiesTextInput
                        placeholder={"Display Name"}
                        name={"displayName"}
                        label={"Display Name"}
                    />
                    <ReactivitiesTextInput placeholder={"Email"} name={"email"} label={"Email"} />
                    <ReactivitiesTextArea placeholder={"Bio"} name={"bio"} rows={3} label={"Bio"} />
                    <Button
                        loading={isSubmitting}
                        disabled={!dirty || !isValid || profileStore.loading}
                        type="submit"
                        positive>
                        Submit
                    </Button>
                    <Button
                        disabled={isSubmitting}
                        onClick={() => profileStore.setEditDetailsMode(false)}>
                        Cancel
                    </Button>
                </Form>
            )}
        </Formik>
    );
}

export default observer(ProfileDetailsEditForm);
