import { Fragment, useEffect, useState } from "react";
import "./App.css";
import { Container } from "semantic-ui-react";
import { ActivityViewModel } from "../../autogenerated/a-p-i/models/activities/response/activity-view-model";
import NavBar from "./NavBar";
import ActivityDashboard from "../../features/activities/dashboard/ActivityDashboard";
import agent from "../api/agent";
import LoadingComponent from "./LoadingComponent";
import { EditActivityRequestModel } from "../../autogenerated/a-p-i/models/activities/request/edit-activity-request-model";
import { CreateActivityRequestModel } from "../../autogenerated/a-p-i/models/activities/request/create-activity-request-model";
import { useStore } from "../stores/store";
import { observer } from "mobx-react-lite";

function App() {
    const { activityStore } = useStore();

    const [activities, setActivities] = useState<ActivityViewModel[]>([]);
    const [selectedActivity, setSelectedActivity] = useState<
        ActivityViewModel | undefined
    >(undefined);
    const [editMode, setEditMode] = useState(false);
    const [submitting, setSubmitting] = useState(false);

    useEffect(() => {
      activityStore.loadActivities();
    },[activityStore])

    function handleCreateOrEditActivty(activity: ActivityViewModel) {
        setSubmitting(true);
        if (activity.id) {
            const editRequest: EditActivityRequestModel = {
                id: activity.id,
                title: activity.title,
                date: activity.date,
                description: activity.description,
                category: activity.category,
                city: activity.city,
                venue: activity.venue,
            };

            agent.Activities.update(editRequest);
            setActivities([
                ...activities.filter((a) => a.id !== activity.id),
                activity,
            ]);
        } else {
            const createRequest: CreateActivityRequestModel = {
                title: activity.title,
                date: activity.date,
                description: activity.description,
                category: activity.category,
                city: activity.city,
                venue: activity.venue,
            };

            agent.Activities.create(createRequest).then((response: number) => {
                setActivities([...activities, { ...activity, id: response }]);
            });
        }

        setSelectedActivity(activity);
        setEditMode(false);
        setSubmitting(false);
    }

    function handleDeleteActivity(id: number) {
        setSubmitting(true);
        agent.Activities.delete(id).then(() => {
            setActivities([...activities.filter((a) => a.id !== id)]);
            setSubmitting(false);
        });
    }

    if (activityStore.loadingInitial) return <LoadingComponent content="Loading App" />;

    return (
        <Fragment>
            <NavBar/>
            <Container style={{ marginTop: "7em" }}>
                <ActivityDashboard
                    activities={activityStore.activities}
                    createOrEdit={handleCreateOrEditActivty}
                    deleteActivity={handleDeleteActivity}
                    submitting={submitting}
                />
            </Container>
        </Fragment>
    );
}

export default observer(App);
