import { Fragment, useEffect, useState } from 'react';
import './App.css';
import { Container } from 'semantic-ui-react';
import { ActivityResponse as Activity, ActivityResponse } from '../../autogenerated/models/activities/response/activity-response';
import NavBar from './NavBar';
import ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';
import agent from '../api/agent';
import LoadingComponent from './LoadingComponent';
import { EditActivityRequest } from '../../autogenerated/models/activities/request/edit-activity-request';
import { CreateActivityRequest } from '../../autogenerated/models/activities/request/create-activity-request';

function App() {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [selectedActivity, setSelectedActivity] = useState<Activity | undefined>(undefined);
  const [editMode, setEditMode] = useState(false);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    agent.Activities.list().then(data => {
        const tempActivities: ActivityResponse[] = [];

        data.forEach(activity => {
          activity.date = activity.date.split('T')[0];
          tempActivities.push(activity);
        })

        setActivities(tempActivities);
        setLoading(false);
      });
  }, [activities]);

  function handleSelectActivity(id: number) {
    setSelectedActivity(activities.find(a => a.id === id));
  }

  function handleCancelSelectedActivity() {
    setSelectedActivity(undefined);
  }

  function handleFormOpen(id?: number) {
    id ? handleSelectActivity(id) : handleCancelSelectedActivity();
    setEditMode(true);
  }

  function handleFormClose() {
    setEditMode(false);
  }

  function handleCreateOrEditActivty(activity: Activity) {
    setSubmitting(true);
    if(activity.id){
      const editRequest: EditActivityRequest = {
        id: activity.id,
        title: activity.title,
        date: activity.date,
        description: activity.description,
        category: activity.category,
        city: activity.city,
        venue: activity.venue
      }

      agent.Activities.update(editRequest);
      setActivities([...activities.filter(a => a.id !== activity.id), activity]);

    } else {
      const createRequest: CreateActivityRequest = {
        title: activity.title,
        date: activity.date,
        description: activity.description,
        category: activity.category,
        city: activity.city,
        venue: activity.venue
      }

      agent.Activities.create(createRequest).then((response: number) => {
        setActivities([...activities, {...activity, id: response}])
      })
    }

    setSelectedActivity(activity);
    setEditMode(false);
    setSubmitting(false);
  }

  function handleDeleteActivity(id: number){
    setActivities([...activities.filter(a => a.id !== id)])
  }

  if(loading) return <LoadingComponent content='Loading App'/>;

  return (
    <Fragment >
      <NavBar openForm={handleFormOpen} />
      <Container style={{ marginTop: '7em' }}>
        <ActivityDashboard
          activities={activities}
          selectedActivity={selectedActivity}
          selectActivity={handleSelectActivity}
          cancelSelectActivity={handleCancelSelectedActivity}
          editMode={editMode}
          openForm={handleFormOpen}
          closeForm={handleFormClose}
          createOrEdit={handleCreateOrEditActivty}
          deleteActivity = {handleDeleteActivity}
          submitting ={submitting}
        />
      </Container>
    </Fragment>
  );
}

export default App;
