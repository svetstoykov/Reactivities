import { makeAutoObservable, reaction, runInAction } from "mobx";
import { ActivityApiModel } from "../../autogenerated/a-p-i/activities/activity-api-model";
import { CategoryApiModel } from "../../autogenerated/a-p-i/activities/category-api-model";
import agent from "../api/agent";
import {
    defaultPageNumber,
    defaultPageSize,
    reactivitiesDateFormat,
} from "../common/constants/GlobalConstants";
import { format } from "date-fns";
import { store } from "./store";
import { ProfileApiModel } from "../../autogenerated/a-p-i/profiles/profile-api-model";
import { Pagination } from "../../autogenerated/application/common/pagination/pagination";
import { ActivityListInputModel } from "../../autogenerated/application/activities/input/activity-list-input-model";
import { ActivityAttendingFilterType } from "../../autogenerated/application/activities/enums/activity-attending-filter-type.enum";

export default class ActivityStore {
    activitiesRegistry = new Map<number, ActivityApiModel>();
    pagination: Pagination;
    activityListInputModel: ActivityListInputModel = {
        pageNumber: defaultPageNumber,
        pageSize: defaultPageSize,
        attending: ActivityAttendingFilterType.AllActivities,
    };
    categories = new Array<CategoryApiModel>();
    selectedActivity: ActivityApiModel | undefined = undefined;
    editMode = false;
    loading = false;
    loadingInitial = false;

    constructor() {
        makeAutoObservable(this);

        reaction(
            () => this.activityListInputModel.attending,
            () => {
                this.loadFilteredActivities();
            }
        );

        reaction(
            () => this.activityListInputModel.startDate,
            () => {
                this.loadFilteredActivities();
            }
        );
    }

    get activitiesByDate() {
        return Array.from(this.activitiesRegistry.values()).sort(
            (a, b) => a.date.valueOf() - b.date.valueOf()
        );
    }

    get groupedActivities() {
        return Object.entries(
            this.activitiesByDate.reduce((activitiesMap, activity) => {
                const date = format(activity.date, reactivitiesDateFormat);

                activitiesMap[date] = activitiesMap[date]
                    ? [...activitiesMap[date], activity]
                    : [activity];

                return activitiesMap;
            }, {} as { [key: string]: ActivityApiModel[] })
        );
    }

    loadActivities = async () => {
        this.setLoadingInitial(true);
        try {
            const paginatedActivities = await agent.Activities.list(this.activityListInputModel);

            paginatedActivities.data.forEach((activity) => {
                this.setActivity(activity);
            });

            this.setPagination(paginatedActivities.pagination);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingInitial(false);
        }
    };

    loadCategories = async () => {
        this.setLoadingInitial(true);
        try {
            const categories = await agent.Activities.categories();

            this.setCategories(categories);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingInitial(false);
        }
    };

    loadActivity = async (id: number) => {
        this.setLoadingInitial(true);
        try {
            let activity = this.activitiesRegistry.get(id);
            if (!activity) {
                activity = await agent.Activities.details(id);
                this.setActivity(activity!);
            }

            this.setSelectedActivity(activity);

            return activity;
        } catch (error) {
            console.log(error);
        } finally{
            this.setLoadingInitial(false);
        }
    };

    createActivity = async (newActivity: ActivityApiModel) => {
        this.setLoading(true);
        try {
            var id = await agent.Activities.create(newActivity);
            
            runInAction(() => {
                newActivity.id = id;
                newActivity.host = store.profileStore.currentProfile;
                this.activitiesRegistry.set(id, newActivity);
                this.selectedActivity = newActivity;
                this.editMode = false;
            });

        } catch (error) {
            console.log(error);
        } finally {
            this.setLoading(false);
        }
    };

    updateActivity = async (activity: ActivityApiModel) => {
        this.setLoading(true);
        try {
            await agent.Activities.update(activity);
            runInAction(() => {
                this.activitiesRegistry.delete(activity.id!);
                this.selectedActivity = activity;
                this.editMode = false;
            });
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoading(false);
        }
    };

    deleteActivity = async (id: number) => {
        this.setLoading(true);
        try {
            await agent.Activities.delete(id);
            runInAction(() => {
                this.activitiesRegistry.delete(id);
            });
        } catch (error) {
            console.log(error)
        } finally{
            this.setLoading(false);
        }
    };

    updateAttendance = async () => {
        const profile = store.profileStore.currentProfile;
        const activityId = this.selectedActivity!.id!;
        this.setLoading(true);
        try {
            await agent.Activities.updateAttendance(activityId);
            if (store.profileStore.isGoingToActivity(this.selectedActivity?.id!)) {
                this.setAttendees(
                    this.selectedActivity!.attendees?.filter((a) => a.username !== profile.username)
                );

                return;
            }

            this.addAtendee(profile);
        } catch (error) {
            console.log(error)
        } finally {
            this.setLoading(false);
        }
    };

    updateStatus = async () => {
        this.setLoading(true);
        try {
            await agent.Activities.updateStatus(this.selectedActivity?.id!);
            runInAction(
                () => (this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled)
            );
        } catch (error) {
            console.log(error)
        } finally {
            this.setLoading(false);
        }
    };

    clearSelectedActivity = () => {
        this.selectedActivity = undefined;
    };

    setLoadingInitial = (state: boolean) => {
        this.loadingInitial = state;
    };

    updateAttendeeFollowingStatus = (targetUser: string) => {
        this.activitiesRegistry.forEach((activity) => {
            activity.attendees.forEach((attendee) => {
                if (attendee.username === targetUser) {
                    attendee.following = !attendee.following;
                    attendee.following ? attendee.followersCount++ : attendee.followersCount--;
                }
            });
        });
    };

    setActivityListParams = (activityListInputModel: ActivityListInputModel) => {
        this.activityListInputModel = activityListInputModel;
    };

    setActivityListAttendingFilter = (filterValue: ActivityAttendingFilterType) => {
        this.activityListInputModel.attending = filterValue;
    };

    resetActivityListPaginationParams = () => {
        this.activityListInputModel = {
            ...this.activityListInputModel,
            pageNumber: defaultPageNumber,
            pageSize: defaultPageSize,
        };
    };

    setActivityStartDateFilter = (startDate: Date | undefined) => {
        this.activityListInputModel.startDate = startDate;
    };

    
    private loadFilteredActivities = () => {
        this.resetActivityListPaginationParams();
        this.activitiesRegistry.clear();
        this.loadActivities();
    };

    private setCategories = (categories: CategoryApiModel[]) => {
        this.categories = categories;
    };

    private addAtendee = (attendee: ProfileApiModel) => {
        this.selectedActivity?.attendees.push(attendee);
    };

    private setAttendees = (attendees: ProfileApiModel[] | undefined) => {
        if (this.selectedActivity) {
            this.selectedActivity.attendees = attendees ?? new Array<ProfileApiModel>();
        }
    };

    private setLoading = (state: boolean) => {
        this.loading = state;
    };

    private setActivity(activity: ActivityApiModel) {
        activity.date = new Date(activity.date + "Z");
        this.activitiesRegistry.set(activity.id!, activity);
    }

    private setSelectedActivity(activity: ActivityApiModel) {
        this.selectedActivity = activity;
    }

    private setPagination(pagination: Pagination) {
        this.pagination = pagination;
    }
}
