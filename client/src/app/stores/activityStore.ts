import { makeAutoObservable, runInAction } from "mobx";
import { ActivityViewModel } from "../../autogenerated/a-p-i/models/activities/activity-view-model";
import agent from "../api/agent";

export default class ActivityStore {
    activitiesRegistry = new Map<number, ActivityViewModel>();
    selectedActivity: ActivityViewModel | undefined = undefined;
    editMode = false;
    loading = false;
    loadingInitial = true;

    constructor() {
        makeAutoObservable(this);
    }

    get activitiesByDate() {
        return Array.from(this.activitiesRegistry.values()).sort(
            (a, b) => Date.parse(a.date) - Date.parse(b.date)
        );
    }

    loadActivities = async () => {
        try {
            const activities = await agent.Activities.list();

            activities.forEach((a) => {
                a.date = a.date.split("T")[0];
                this.activitiesRegistry.set(a.id!, a);
            });

            this.setLoadingInitial(false);
        } catch (error) {
            console.log(error);
            this.setLoadingInitial(false);
        }
    };

    openForm = (id?: number) => {
        id ? this.selectActivity(id) : this.cancelSelectedActivity();
        this.editMode = true;
    };

    closeForm = () => {
        this.editMode = false;
    };

    createActivity = async (newActivity: ActivityViewModel) => {
        this.loading = true;
        try {
            var id = await agent.Activities.create(newActivity);
            newActivity.id = id;

            runInAction(() => {
                this.activitiesRegistry.set(id, newActivity);
            });

            this.finishAndSelectActivity(newActivity);
        } catch (ex) {
            this.logException(ex);
        }
    };

    updateActivity = async (activity: ActivityViewModel) => {
        this.loading = true;
        try {
            await agent.Activities.update(activity);
            runInAction(() => {
                this.activitiesRegistry.set(activity.id!, activity);
            });

            this.finishAndSelectActivity(activity);
        } catch (ex) {
            this.logException(ex);
        }
    };

    deleteActivity = async (id: number) => {
        this.loading = true;
        try {
            await agent.Activities.delete(id);
            runInAction(() => {
                this.activitiesRegistry.delete(id);
                if (this.selectedActivity?.id === id) {
                    this.cancelSelectedActivity();
                }

                this.loading = false;
            });
        } catch (ex) {
            console.log(ex);
            runInAction(() => {
                this.loading = false;
            });
        }
    };

    selectActivity = (id: number) => {
        this.selectedActivity = this.activitiesRegistry.get(id);
    };

    cancelSelectedActivity = () => {
        this.selectedActivity = undefined;
    };

    private setLoadingInitial = (state: boolean) => {
        this.loadingInitial = state;
    };

    private finishAndSelectActivity = (activity: ActivityViewModel) => {
        this.selectedActivity = activity;
        this.loading = false;
        this.editMode = false;
    };

    private logException = (ex: any) => {
        console.log(ex);
        this.loading = false;
    };
}
