import { makeAutoObservable, runInAction } from "mobx";
import { ActivityViewModel } from "../../autogenerated/a-p-i/activities/models/activity-view-model";
import { CategoryViewModel } from "../../autogenerated/a-p-i/activities/models/category-view-model";
import agent from "../api/agent";
import { reactivitiesDateFormat } from "../common/constants/GlobalConstants";
import {format} from "date-fns"

export default class ActivityStore {
    activitiesRegistry = new Map<number, ActivityViewModel>();
    categories = new Array<CategoryViewModel>();
    selectedActivity: ActivityViewModel | undefined = undefined;
    editMode = false;
    loading = false;
    loadingInitial = false;

    constructor() {
        makeAutoObservable(this);
    }

    get activitiesByDate() {
        return Array.from(this.activitiesRegistry.values()).sort(
            (a, b) => a.date.valueOf() - b.date.valueOf()
        );
    }

    get groupedActivities() {
        return Object.entries(
            this.activitiesByDate.reduce((activitiesMap, activity) => {
                const date = format(activity.date, reactivitiesDateFormat);

                activitiesMap[date] = activitiesMap[date]
                    ? [...activitiesMap[date], activity]
                    : [activity];

                return activitiesMap;
            }, {} as { [key: string]: ActivityViewModel[] })
        );
    }

    loadActivities = async () => {
        this.setLoadingInitial(true);
        try {
            const activities = await agent.Activities.list();
            activities.forEach((activity) => {
                this.setActivity(activity);
            });
        } catch (error) {
            console.log(error);
        }

        this.setLoadingInitial(false);
    };

    loadCategories = async () => {
        this.setLoadingInitial(true);
        try {
            const categories = await agent.Activities.categories();

            this.categories = categories;
            this.setLoadingInitial(false);
        } catch (error) {
            console.log(error);
            this.setLoadingInitial(false);
        }
    };

    loadActivity = async (id: number) => {
        this.setLoadingInitial(true);
        try {
            let activity = this.activitiesRegistry.get(id);
            if (!activity) {
                activity = await agent.Activities.details(id);
                this.setActivity(activity!);
            }

            this.selectedActivity = activity;
            this.setLoadingInitial(false);

            return activity;
        } catch (ex) {
            console.log(ex);
            this.setLoadingInitial(false);
        }
    };

    createActivity = async (newActivity: ActivityViewModel) => {
        this.loading = true;
        try {
            var id = await agent.Activities.create(newActivity);
            newActivity.id = id;

            runInAction(() => {
                this.activitiesRegistry.set(id, newActivity);
            });

            this.finishAndSelectActivity(newActivity);
        } catch (ex) {
            this.logException(ex);
        }
    };

    updateActivity = async (activity: ActivityViewModel) => {
        this.loading = true;
        try {
            await agent.Activities.update(activity);
            runInAction(() => {
                this.activitiesRegistry.set(activity.id!, activity);
            });

            this.finishAndSelectActivity(activity);
        } catch (ex) {
            this.logException(ex);
        }
    };

    deleteActivity = async (id: number) => {
        this.loading = true;
        try {
            await agent.Activities.delete(id);
            runInAction(() => {
                this.activitiesRegistry.delete(id);
                this.loading = false;
            });
        } catch (ex) {
            this.logException(ex);
        }
    };

    setLoadingInitial = (state: boolean) => {
        this.loadingInitial = state;
    };

    private finishAndSelectActivity = (activity: ActivityViewModel) => {
        this.selectedActivity = activity;
        this.loading = false;
        this.editMode = false;
    };

    private logException = (ex: any) => {
        console.log(ex);
        this.loading = false;
    };

    private setActivity(activity: ActivityViewModel) {
        activity.date = new Date(activity.date);
        this.activitiesRegistry.set(activity.id!, activity);
    }
}
