import { makeAutoObservable } from "mobx";
import { ProfileApiModel } from "../../autogenerated/a-p-i/profiles/profile-api-model";
import agent from "../api/agent";
import { store } from "./store";

export default class ProfileStore {
    private profile: ProfileApiModel | null = null;
    private selectedProfile: ProfileApiModel | null = null;
    loadingUser = false;

    constructor() {
        makeAutoObservable(this);
    }

    get currentProfile() {
        return this.profile;
    }

    get isLoggedIn() {
        return !!this.profile;
    }

    loadProfile = async (username: string) => {
        this.loadingUser = true;
        try {
            const profile = await agent.Profiles.get(username);

            this.setSelectedProfile(profile);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingUser(false);
        }
    };

    loadCurrentProfile = async () => {
        this.loadingUser = true;
        try {
            const profile = await agent.Profiles.getCurrent();

            this.setCurrentProfile(profile);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingUser(false);
        }
    };

    isActivityHost = (activityHostUsername: string | undefined) => {
        return this.profile?.username === activityHostUsername;
    };

    isGoingToActivity = (activityId: number) => {
        return store.activityStore.activitiesRegistry
            .get(activityId)
            ?.attendees.some((a) => a.username === this.profile?.username);
    };

    setCurrentProfile = (profile: ProfileApiModel | null) => {
        this.profile = profile;
    };

    setSelectedProfile = (selectedProfile: ProfileApiModel | null) => {
        this.selectedProfile = selectedProfile;
    };

    private setLoadingUser = (state: boolean) => {
        this.loadingUser = state;
    };
}
