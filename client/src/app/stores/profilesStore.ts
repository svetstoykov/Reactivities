import { makeAutoObservable } from "mobx";
import { ProfileApiModel } from "../../autogenerated/a-p-i/profiles/profile-api-model";
import agent from "../api/agent";
import { store } from "./store";

export default class ProfileStore {
    private profile: ProfileApiModel | null = null;
    selectedProfile: ProfileApiModel | null = null;
    loadingUser = false;
    loading = false;
    editDetailsMode = false;

    constructor() {
        makeAutoObservable(this);
    }

    get currentProfile() {
        return this.profile!;
    }

    get isLoggedIn() {
        return !!this.profile;
    }

    get isCurrentProfile() {
        if (this.profile && this.selectedProfile) {
            return this.profile.username === this.selectedProfile.username;
        }

        return false;
    }

    loadProfile = async (username: string) => {
        this.loadingUser = true;
        try {
            const profile = await agent.Profiles.get(username);

            this.setSelectedProfile(profile);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingUser(false);
        }
    };

    loadCurrentProfile = async () => {
        this.loadingUser = true;
        try {
            const profile = await agent.Profiles.getCurrent();

            this.setCurrentProfile(profile);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoadingUser(false);
        }
    };

    uploadProfilePicture = async (file: Blob) => {
        this.setLoading(true);
        try {
            const response = await agent.Profiles.uploadPhoto(file);
            const pictureUrl = response.data;

            this.setProfilePicture(pictureUrl);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoading(false);
        }
    };

    deleteProfilePicture = async () => {
        this.setLoading(true);
        try {
            await agent.Profiles.deletePhoto();

            this.setProfilePicture("");
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoading(false);
        }
    };

    updateDetails = async (profile: ProfileApiModel) => {
        this.setLoading(true);
        try {
            await agent.Profiles.updateDetails(profile);

            this.setSelectedProfile(profile);
        } catch (error) {
            console.log(error);
        } finally {
            this.setLoading(false);
        }
    };

    setEditDetailsMode = (state: boolean) => {
        this.editDetailsMode = state;
    };

    isActivityHost = (activityHostUsername: string | undefined) => {
        return this.profile?.username === activityHostUsername;
    };

    isGoingToActivity = (activityId: number) => {
        return store.activityStore.activitiesRegistry
            .get(activityId)
            ?.attendees.some((a) => a.username === this.profile?.username);
    };

    setCurrentProfile = (profile: ProfileApiModel | null) => {
        this.profile = profile;
    };

    private setProfilePicture = (pictureUrl: string) => {
        this.currentProfile.pictureUrl = pictureUrl;
    };

    private setLoading = (state: boolean) => {
        this.loading = state;
    };

    private setSelectedProfile = (selectedProfile: ProfileApiModel | null) => {
        this.selectedProfile = selectedProfile;
    };

    private setLoadingUser = (state: boolean) => {
        this.loadingUser = state;
    };
}
