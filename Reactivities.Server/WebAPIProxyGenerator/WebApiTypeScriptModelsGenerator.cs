using System.Diagnostics;
using API.Common.Models;
using Application.Common.Models;
using Application.Common.Models.Pagination;
using Models.Common;
using Models.ErrorHandling;
using TypeScriptModelsGenerator;
using WebAPIGenerator.ErrorHandling;

namespace WebAPIGenerator
{
    public static class WebApiTypeScriptModelsGenerator
    {
        private const string AutoGeneratedFolderTemplate = "{0}\\client\\src\\autogenerated";

        private static string ClientAutoGeneratedFolder => GetAutoGeneratedFolder();

        private static IReadOnlyCollection<Type> ModelsToGenerateFrom
            => new[] { typeof(BaseApiModel), typeof(BaseAppModel)};

        public static void CleanUpTypeScriptModels()
        {
            if (Directory.Exists(ClientAutoGeneratedFolder))
            {
                Directory.Delete(ClientAutoGeneratedFolder, true);
            }
        }

        public static void GenerateTypeScriptModels()
        {
            var allExportedTypes = ModelsToGenerateFrom
                .Select(model => model.Assembly)
                .SelectMany(assembly => assembly.GetExportedTypes());

            var typesToGenerate = allExportedTypes
                .Where(type => ModelsToGenerateFrom.Any(model => model.IsAssignableFrom(type)) || type.IsEnum)
                .Distinct();
            
            try
            {
                TypeScriptModelsGeneration
                    .Setup(typesToGenerate, ClientAutoGeneratedFolder, cfg =>
                    {
                        cfg.AddNamespaceReplaceRule("Models", string.Empty);
                        cfg.InitializeTypes = false;
                    })
                    .Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine(TypeScriptModelGeneratorErrorMessages.FailedToGenerateTypeScriptModels);
                Console.WriteLine();
                Console.WriteLine(ex.Message);
                Console.ReadKey();
            }
        }

        private static string GetAutoGeneratedFolder()
        {
            var currentDirectory = Directory.GetCurrentDirectory();
            while (currentDirectory.Split('\\').Last() != GlobalConstants.Reactivities)
            {
                var parentDirectory = Directory.GetParent(currentDirectory);
                if (parentDirectory == null)
                {
                    throw new AppException(
                        TypeScriptModelGeneratorErrorMessages.InvalidPath);
                }

                currentDirectory = parentDirectory.FullName;
            }

            return string.Format(AutoGeneratedFolderTemplate, currentDirectory);
        }
    }
}
