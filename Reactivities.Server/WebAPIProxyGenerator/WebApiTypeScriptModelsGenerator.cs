using System.Dynamic;
using System.Reflection;
using Domain.Base;
using Models.Activities.Base;
using Models.Common;
using TypeScriptModelsGenerator;

namespace WebAPIProxyGenerator
{
    public static class WebApiTypeScriptModelsGenerator
    {
        private static string ClientAutoGenerated => GetAutoGeneratedFolder();

        public static void CleanUpTypeScriptModels()
        {
            if (Directory.Exists(ClientAutoGenerated))
            {
                Directory.Delete(ClientAutoGenerated, true);
            }
        }

        public static void GenerateTypeScriptModels()
        {
            var commonModels = typeof(ActivityBaseRequest).Assembly
                .GetExportedTypes()
                .Where(t => !t.IsSealed);
            var domainModels = typeof(DomainModel).Assembly
                .GetExportedTypes()
                .Where(type => typeof(DomainModel).IsAssignableFrom(type));

            TypeScriptModelsGeneration
                .Setup(commonModels.Concat(domainModels), ClientAutoGenerated)
                .Execute();
        }

        private static string GetAutoGeneratedFolder()
        {
            var initialPath = Directory.GetCurrentDirectory();
            while (initialPath.Split('\\').Last() != GlobalConstants.Reactivities)
            {
                initialPath = Directory.GetParent(initialPath).FullName;
            }

            return $"{initialPath}\\client\\src\\autogenerated";
        }
    }
}
